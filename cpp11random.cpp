#include <iostream>
#include <random>
#include <iomanip>
#include <map>

using namespace std;

int main() {
    // Генератор "случайных" чисел, реализация зависит от системы.
    // Т.е. физический, т.е используются, грубо говоря, шумы в проводах компьютера.
    // На некоторых платформах может быть нереализован,
    // т.е. возвращать неслучайные числа.
    // Генерация СЧ физически -- долгая операция.
    random_device rd;
    // Если хотим воспроизводимости при нескольких запусках программы,
    // выставляем в seed просто некое число.
    random_device::result_type seed = rd();
    
    // Генератор псевдослучайных чисел. Реализаций ГПСЧ в stl несколько.
    // Значение из random_device используется в качестве начального
    // значения (seed) для псевдослучайного генератора.
    // А имея начальное "случайное" значение, можно по нему
    // быстро генерировать псевдослучайную последовательность.
    mt19937 prd(seed);
    
    // А из сгенерированных (псевдо)случайных последовательностей
    // можно собирать любое нужное распределение.
    
    // Целые числа от 2 до 7 равновероятно.
    // А вот так делать не надо: "2 + unifInts(prd) % 6" --
    // не совсем равновероятно, менее эффективно и др.
    uniform_int_distribution<int> unifInts(2, 7);
    for (int i = 0; i < 20; ++i) {
        cout << unifInts(prd) << " ";
    }
    cout << endl;
    
    // Гаусс с гистограммой
    normal_distribution<double> gauss(5, 2);
    map<int, int> hist;
    for (int n = 0; n < 10000; ++n) {
        ++hist[round(gauss(prd))];
    }
    for (pair<int, int> p : hist) {
        cout << fixed << setprecision(1) << setw(2)
                << p.first << ' ' << string(p.second / 200, '*') << endl;
    }
    
    // ... (http://en.cppreference.com/w/cpp/numeric/random)
    return 0;
}
